#!/usr/bin/env bash

WAIT_START=60
JUPYTER_HOME=$1
HADOOP_HOME=$2
HADOOP_CONF_DIR=${HADOOP_HOME}/etc/hadoop
PROJECT_USER_NAME=$3
ANACONDA_ENV=$4
PORT=$5
LOGFILE=${JUPYTER_HOME}/logs/$6
SECRET_DIR=$7
CERTS_DIR=$8
TOKEN=${10}
JUPYTER_MODE=${11}
IMAGE=${12}
ALLOCATED_MEMORY=${13}
ALLOCATED_CORES=${14}
BASE_DIR=${15}
NAMENODE_HOSTNAME=<%= @namenode_fdqn %>
NAMENODE_PORT=<%= node['hops']['nn']['port'] %>
CONTAINER_NAME=${PROJECT_USER_NAME}__jupyter
PID_FILE=${JUPYTER_HOME}/run/jupyter.pid
SPARK_CONF_DIR=<%= node['hadoop_spark']['conf_dir'] %>
IS_TLS=<%= node['hops']['tls']['enabled'] %>
SECCOMP_FILE=<%= node['hops']['docker']['fuse-seccomp-file'] %>
NOT_FOUND=127

help() {
    echo ""
    echo "usage: $0 JUPYTER_HOME HADOOP_HOME PROJECT_USER_NAME ANACONDA_ENV PORT LOGFILE SECRET_DIR CERTS_DIR HADOOP_USERNAME TOKEN JUPYTER_MODE IMAGE_NAME ALLOCATED_MEMORY ALLOCATED_CORES BASE_DIR "
    echo ""
    exit 1
}

function kill_named {
    CID=$(docker container list -a | grep $CONTAINER_NAME | grep -v grep | awk '{print $1}')
    if [ "$CID" != "" ] ; then
	docker rm -f "$CID" > /dev/null 2>&1
        res=$?
    else
	res=$NOT_FOUND
    fi
    return "$res"
}

if [ $# -ne 15 ]; then
  help
fi

#check if the folders exist
cd "$JUPYTER_HOME" || exit
cd "$SECRET_DIR" || exit

kill_named

if [ -f "$PID_FILE" ] ; then
    rm $PID_FILE
fi

JUPYTER_HOPSFS_MOUNT=false
DOCKER_FUSE_ARGS=""
WORKING_DIR=$SECRET_DIR
if [ -f ${JUPYTER_HOME}/conf/jupyter_contents_manager_config.py ]; then
  JUPYTER_HOPSFS_MOUNT=true
  DOCKER_FUSE_ARGS="--device /dev/fuse --security-opt apparmor:hopsworks-hopsfsmount-docker --security-opt seccomp=${SECCOMP_FILE}"
  WORKING_DIR=<%= node['hopsworks']['jupyter']['hopsfs_dir'] %>
else
  paste ${JUPYTER_HOME}/conf/jupyter_contents_manager_config.py >> ${JUPYTER_HOME}/conf/jupyter_notebook_config.py
fi

docker run --rm -d $DOCKER_FUSE_ARGS --name $CONTAINER_NAME --cidfile=$PID_FILE\
       --network=host \
       --init \
       --memory="${ALLOCATED_MEMORY}m" \
       --cpus="${ALLOCATED_CORES}" \
       -e "JUPYTER_PATH=$JUPYTER_HOME" \
       -e "JUPYTER_DATA_DIR=$JUPYTER_HOME" \
       -e "PDIR=$SECRET_DIR" \
       -e "JUPYTER_CONFIG_DIR=${JUPYTER_HOME}/conf" \
       -e "JUPYTER_RUNTIME_DIR=${JUPYTER_HOME}/run" \
       -e "SPARKMAGIC_CONF_DIR=${JUPYTER_HOME}/conf" \
       -e "PYSPARK_PYTHON=${ANACONDA_ENV}/bin/python" \
       -e "PYLIB=${ANACONDA_ENV}/lib" \
       -e "HADOOP_HDFS_HOME=${HADOOP_HOME}" \
       -e "HADOOP_CONF_DIR=${HADOOP_CONF_DIR}" \
       -e "HADOOP_CLIENT_OPTS='-Dfs.permissions.umask-mode=0002'" \
       -e "MATERIAL_DIRECTORY=$CERTS_DIR" \
       -e "HADOOP_USER_NAME=$9" \
       -e "HADOOP_HOME=${HADOOP_HOME}" \
       -e "ANACONDA_ENV=$4" \
       -e "PYTHONHASHSEED=0" \
       -e "NAMENODE_HOSTNAME=${NAMENODE_HOSTNAME}" \
       -e "NAMENODE_PORT=${NAMENODE_PORT}" \
       -e "IS_TLS=${IS_TLS}" \
       -e "BASE_DIR=${BASE_DIR}" \
       -e "JUPYTER_HOPSFS_MOUNT=${JUPYTER_HOPSFS_MOUNT}" \
       -v $JUPYTER_HOME:$JUPYTER_HOME:rw \
       -v $SECRET_DIR:$SECRET_DIR:rw \
       -v ${HADOOP_CONF_DIR}:${HADOOP_CONF_DIR}:ro \
       -v ${SPARK_CONF_DIR}:${SPARK_CONF_DIR}:ro \
       -u="yarnapp" \
       -w="$WORKING_DIR" \
       $IMAGE \
       /usr/local/bin/jupyter-launcher.sh $PORT $LOGFILE $TOKEN $JUPYTER_MODE &


# Wait for jupyter to start
timeout=0
while [ $timeout -lt $WAIT_START ] ; do
  sleep 1
  grep 'Use Control-C to stop this server' "$LOGFILE"
        if [ $? -eq 0 ] ; then
          break
        fi
  echo -n "."
  timeout=$((timeout + 1))
done
echo ""

# If the timeout was exceeded, kill JupyterLab
if [ "$timeout" -eq $WAIT_START ] ; then
 kill_named
fi


exit $?
